import { app, BrowserWindow, ipcMain, Menu, Tray, nativeImage } from "electron";
import { ChildProcess } from "child_process";
import { IPC_EVENTS } from "./constants";
import * as commands from "./commands";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let tray: Tray;
export const activeProcesses: ChildProcess[] = [];

export const killAllProcesses = () => {
  activeProcesses.forEach((_process) => {
    if (!_process.killed) {
      _process.kill();
    }
  });
  activeProcesses.splice(0, activeProcesses.length);
};

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

const loadIpcEvents = () => {
  ipcMain.on(IPC_EVENTS.EXEC, (_, args) => {
    const process = commands.run(args.cmnd, args.cwd);
    activeProcesses.push(process);
  });
  ipcMain.on(IPC_EVENTS.KILL_ALL, () => {
    killAllProcesses();
  });
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  loadIpcEvents();

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

const createTray = (): void => {
  if (tray) return;
  const icon = nativeImage.createFromPath('./static/icons/menuIcon.png');
  tray = new Tray(icon);
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Item1', type: 'radio' },
    { label: 'Item2', type: 'radio' },
    { label: 'Item3', type: 'radio', checked: true },
    { label: 'Item4', type: 'radio' },
  ]);
  tray.setToolTip('This is my application.');
  tray.setContextMenu(contextMenu);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
  createTray();
});

app.on("before-quit", () => {
  killAllProcesses();
});
// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
